external class num {

	static fun parse(value: str): num

  fun toStringAsFixed([fractionDigits: num = 0]): num

  fun truncate(): num
}

external class bool {

	static fun parse(value: str): bool
}

external class str {

	static fun parse(value): str

	get isEmpty: bool

	get isNotEmpty: bool

	fun substring(startIndex: num, [endIndex: num]): str

	fun startsWith(pattern: str, [index: num]): bool

	fun endsWith(other: str): bool

	fun indexOf(pattern: str, [start: num]): num

	fun lastIndexOf(pattern, [start: num]): num

	fun compareTo(other): num

	fun trim(): str

	fun trimLeft(): str

	fun trimRight(): str

	fun padLeft(width: num, [padding: str]): str

	fun padRight(width: num, [padding: str]): str

	fun contains(other: str, [startIndex: num]): bool

	fun replaceFirst(from: str, to: str, [startIndex: num]): str

	fun replaceAll(from: str, replace: str): str

	fun replaceRange(start: num, end: num, replacement: str): str

	fun split(pattern: str): List

	fun toLowerCase(): str

	fun toUpperCase(): str

	fun length() : num
}

external class List {

	get length: num

	get isEmpty: bool

	get isNotEmpty: bool

	get first

	get last

	fun contains(value): bool

	fun add(value)

	fun addAll(value: List)

	fun clear()

	fun removeAt(index: num)

	fun indexOf(value): num

	fun elementAt(index: num): any

	fun join(splitter: str): str

	fun insert(index: num, value)

	fun remove(value)
}

external class Map {

	get length: num

	get isEmpty: bool

	get isNotEmpty: bool

  get keys: List

  get values: List

	fun containsKey(value): bool

	fun containsValue(value): bool

	fun addAll(other: Map)

	fun clear()

	fun remove(key)

  fun putIfAbsent(key, value): any
}